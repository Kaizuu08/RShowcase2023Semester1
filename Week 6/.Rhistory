read.csv("plants.csv")
plants < -read.csv("plants.csv")
plants <-read.csv("plants.csv")
plants
plants
str(plants)
is.na(plantws)
is.na(plants)
summary(plants)
table(is.na(plants))
plants <- na.omit(plants)
plants
plants
class(plants)
plants$Scientific_Name
scientific_name <-plants$Scientific_Name
scientific_name
mean(plants$Precip_Min)
median(plants$Precip_Min)
rainfall <- plants$Precip_Min
rainfall
getmode <- function(rainfall) {
uniq_rainfall <- unique(rainfall)
uniq_rainfall[which.max(tabulate(match(rainfall, uniq_rainfall)))]
}
result <- getmode(rainfall)
result
duration <- plants$Duration
duration
result <- getmode(duration)
result
phmin <- plants$pH_Min
result <- getmode(phmin)
result
var(plants$Precip_Min)
sd(phmin)
dim(plants)
names(plants)
summary(plants)
str(plants)
plot(plants$Duration)
plot(plants$Duration)
plot(plants$Duration)
plot(plants$Duration)
is.na(plant)
is.na(plants)
plants <- read.csv(plants.csv)
plants <- read.csv("plants.csv")
plot(plants)
plants
plants
na.omit(plants)
plants <- na.omit(plants)
plants
is.na(plants)
plot(plants)
plot(plants$Duration)
plants <- read.csv("plants.csv")
plot(plants$Duration)
na.omit(plants)
plants <- na.omit(plants)
plants
plot(plants$Foliage_Color, plants$Shade_Tolerance)
table(is.na(plants))
na.rm(plants)
tolerance <- table(plants$Shade_Tolerance)
barplot(tolerance, main="Shade tolerance",xlab="Number of shade tolerant plants by tolerance group")
type(tolerance)
levels(tolerance)
levels(plants)
levels(plants$Shade_Tolerance)
planting_guide <- table(plants$Duration, plants$Foliage_Color)
barplot(planting_guide, main="Planting Guide", xlab="Duration", col=rainbow(8), legend = rownames(planting_guide))
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
lines(pressure$temperature, pressure$pressure/2, col = "red")
points(pressure$temperature, pressure$pressure/2, col = "red")
Orange$Tree <- as.numeric(Orange$Tree)
ntrees <- max(Orange$Tree)
xrange <- range(Orange$age)
yrange <- range(Orange$circumference)
plot(xrange, yrange, type="n", xlab="Age (days)",
ylab="Circumference (mm)" )
colors <- rainbow(ntrees)
for (i in 1:ntrees) {
tree <- subset(Orange, Tree==i)
lines(tree$age, tree$circumference, type="b", lwd=1.5,
col=colors[i], pch=19)
}
slices<- table(plants$Foliage_Color)
levels(plants$Foliage_Color)
lbls <- paste(names(slices), "\n", slices, sep="")
as.factor(plants$Foliage_Color)
levels(plants$Foliage_Color)
lbls <- paste(names(slices), "\n", slices, sep="")
pie(slices, labels = lbls, main="Pie Chart of active growth period")
slices <- table(plants$Shade_Tolerance)
levels(slices)
slices
slices <- table(pants$Shade_Tolderance)
slices <- table(plants$Shade_Tolderance)
slices
slices
levels(plants$Shade_Tolerance)
lbls <- paste(names(slices), "\n", slices, sep="")
pie(slices, labels = lbls, main="Pie Chart of Shade Tolerance")
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon", varwidth = TRUE)
slices <- table(plants$Shade_Tolerance)
slices
levels(plants$Shade_Tolerance)
levels(plants)
str(plants)
levels(as.factor(plants$Shade_Tolerance))
lbls <- paste(names(slices), "\n", slices, sep="")
lbls
pie(slices,labels = lbls, main"Pie Chart")
pie(as.factor(slices),labels = lbls, main"Pie Chart")
pie(as.factor(slices),labels = lbls, main= "Pie Chart")
pie(as.factor(slices),labels = lbls, main= "Pie Chart")
plants$Duration <- as.factor()
plants$Duration <- as.factor(plants$Duration)
str(plantss)
str(plants)
plants$Foliage_Color <- as.factor(plants$Foliage_Color)
plants$Shade_Tolerance <- as.factor(plants$Shade_Tolerance)
plants$Active_Growth_Period <- as.factor(plants$Active_Growth_Period)
plot(plantss$duration)
plot(plants$duration)
plot(plants$duration)
plot(plants$duration)
is.na(plants)
plants$Duration
plot(plants)
plot(plants$Duration)
plot(plants$Foliage_Color, plants$Shade_Tolerance)
plot(plants$Shade_Tolerance, plants$Precip_Max)
plot(plants$Shade_Tolerance, plants$Precip_Min)
plot(plants$Precip_Max, plants$Precip_Min)
tolerance <- table(plants$Shade_Tolerance)
barplot(tolerance, main="Shade tolerance",xlab="Number of shade tolerant plants by tolerance group")
barplot(tolerance,xlab="Number of shade tolerant plants by tolerance group", main="Shade tolerance")
barplot(tolerance, main="Shade tolerance",xlab="Number of shade tolerant plants by tolerance group")
barplot(tolerance, main="Shade tolerance",xlab="Number of shade tolerant plants by tolerance group")
barplot(tolerance, main="Shade tolerance",xlab="Number of shade tolerant plants by tolerance group")
planting_guide <- table(plants$Duration, plants$Foliage_Color)
planting_guide <- table(plants$Duration, plants$Foliage_Color)
planting_guide <- table(plants$Duration, plants$Foliage_Color)
planting_guide <- table(plants$Duration, plants$Foliage_Color)
barplot(planting_guide, main="Planting Guide", xlab="Duration", col=rainbow(8), legend = rownames(planting_guide))
barplot(planting_guide, main="Planting Guide", xlab="Duration", col=rainbow(8), legend = rownames(planting_guide))
barplot(planting_guide, main="Planting Guide", xlab="Duration", col=rainbow(8)(planting_guide))
plot(pressure$temperature, pressure$pressure, type = "l")
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
lines(pressure$temperature, pressure$pressure/2, col = "red")
points(pressure$temperature, pressure$pressure/2, col = "red")
pie(slices, labels = lbls, main="Pie Chart of active growth period")
pie(slices, labels = lbls, main="Pie Chart of active growth period")
plot(pressure$temperature, pressure$pressure, type = "l")
points(pressure$temperature, pressure$pressure)
lines(pressure$temperature, pressure$pressure/2, col = "red")
lines(pressure$temperature, pressure$pressure/2, col = "red")
lines(pressure$temperature, pressure$pressure/2, col = "red")
points(pressure$temperature, pressure$pressure/2, col = "red")
slices <- table(plants$Shade_Tolerance)
lbls <- paste(names(slices), "\n", slices, sep="")
pie(slices, labels = lbls, main="Pie Chart of Shade Tolerance")
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon", varwidth = TRUE)
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon", varwidth = TRUE,horizontal = TRUE)
quantile(plants$Precip_Min)
quantile(plants$Precip_Min, probs=c(0.025,0.975))
attach(mtcars)
plot(wt, mpg, main="Scatterplot Example", xlab="Car Weight", ylab="Miles per Gallon", pch=19)
abline(lm(mpg~wt), col="red")
# regression line (y~x)
lines(lowess(wt,mpg), col="blue") # lowess line (x,y)
hist(mtcars$mpg, main="Frequency of mpg", xlab="mpg",ylab="Frequency")
hist(mtcars$mpg, breaks = 12, col="red")
hist(plants$Temp_Min_F, main="Plants Min Temperature")
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
sample(plants$Precip_Max, size=10, replace=TRUE)
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(5*(sample(plants$Precip_Max, size=10, replace=TRUE)))
mean(5*(sample(plants$Precip_Max, size=10, replace=TRUE)))
mean(5*(sample(plants$Precip_Max, size=10, replace=TRUE)))
mean(5*(sample(plants$Precip_Max, size=10, replace=TRUE)))
mean(5*(sample(plants$Precip_Max, size=10, replace=TRUE)))
mean(5*(sample(plants$Precip_Max, size=10, replace=TRUE)))
mean(5*(sample(plants$Precip_Max, size=10, replace=TRUE)))
mean(5*(sample(plants$Precip_Max, size=10, replace=TRUE)))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
mean(sample(plants$Precip_Max, size=10, replace=TRUE))
replicate(10,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(10,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(10,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(100,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(100,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(100,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(100,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(100,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(100,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(1000,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(1000,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(1000,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(950,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(950,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(950,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
replicate(920,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE)
mean(replicate(100,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE))
hist(replicate(100,mean(sample(plants$Precip_Max, size=10, replace=TRUE)), simplify=TRUE),main="Histogram of samples", xlab= "Rainfall in mm", ylab="Frequency")
replicate(10,sample(plants$pH_Max, size=10, replace=TRUE), simplify=TRUE)
replicate(10,mean(sample(plants$pH_Max, size=10, replace=TRUE)), simplify=TRUE)
result <- replicate(1000,sample(plants$pH_Max, size=10, replace=TRUE), simplify=TRUE)
result
mean(result)
result <- replicate(1000,sample(plants$pH_Max, size=10, replace=TRUE), simplify=TRUE)
hist(result)
getwd()
setwd("D:/University of Sunshine Coast/Semester 1/Data Science - ICT110/Week 7")
getwd()
install.packages("arules")
wine <- read.csv("wine.csv")
orang
orange
orange
wine
View(Orange)
View(Orange)
install.packages("arulesViz")
library(arules)
# if in lab, ignore the following command
library(arulesViz)
trans <- read.transactions(file="groceries.txt", format="basket", sep=",")
trans
# view all transaction records
inspect(trans)
# Get the summary about the data
summary(trans)
# get number of records
length(trans)
# get the number of items in each transaction (see http://127.0.0.1:23998/library/arules/html/size.html for more info) or type help(size) in R.
size(trans)
#get a summary of the transaction sizes
summary(size(trans))
#get a summary of how many transactions have 1,2,3 etc items
table(size(trans))
# get the frequency for all single items
itemFrequency(trans, type="absolute")
# get the frequency for a specific item, e.g. “yogurt”
itemFrequency(trans,type="absolute")["yogurt"]
itemFrequency(trans,type="absolute")["hair spray"]
> itemFrequency(trans)["hair spray"]
itemFrequency(trans)["hair spray"]
itemFrequencyPlot (trans,topN=10,type="absolute")
# Find all rules where minimum support is 0.001, and minimum confidence is 0.5
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.5))
rules
rules
length(rules)
inspect(rules)
inspect(rules[1:5])
rules <- sort (rules, by="confidence", decreasing=TRUE)
inspect(rules[1:10])
inspect(rules[1:5])
rules <- apriori (trans, parameter = list(support=0.001, confidence=0.5, minlen=3, maxlen=4))
rules <- sort (rules, by="confidence", decreasing=TRUE)
inspect (rules[1:5])
rules <- apriori (trans, parameter = list(support=0.004, confidence=0.5, minlen=4))
inspect(rules[1:3])
inspect(rules[1:5])
rules <- sort (rules, by="confidence", decreasing=TRUE)
inspect(rules[1:5])
inspect(head(sort(rules,by="lift"),n=5))
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.5), appearance=list(default="lhs", rhs=c("yogurt")))
inspect (rules[1:5])
rules <- sort (rules, by="lift", decreasing=TRUE)
inspect (rules[1:5])
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.5), appearance=list(default="lhs", rhs=c("butter")))
inspect (rules[1:5])
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.1, minlen=3), appearance=list(default="rhs", lhs=c("whole milk", "yogurt" and chocolate)))
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.1, minlen=3), appearance=list(default="rhs", lhs=c("whole milk", "yogurt" | "chocolate")))
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.1, minlen=3), appearance=list(default="rhs", lhs=c("whole milk", "yogurt" & "chocolate")))
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.1, minlen=3), appearance=list(default="rhs", lhs=c("whole milk", "yogurt" , "chocolate")))
inspect(rules[1:5])
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.3), appearance=list(default="rhs", lhs=c("whole milk", "yogurt" , "chocolate")))
inspect(rules[1:5])
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.5), appearance=list(rhs=c("soda"), default="lhs"))
inspect(rules)
# get redundant rules in vector
redundant <- which(colSums(is.subset(rules, rules)) > 1)
# get the rule id which is redundant
redundant
rules <- rules[-redundant]
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.5), appearance=list(rhs=c("soda"), default="lhs"))
inspect(rules)
rules <- apriori(trans, parameter=list(support=0.001, confidence=0.5), appearance=list(rhs=c("soda"), default="lhs"))
inspect(rules)
plot(rules, measure=c("support", "confidence"), jitter=0)
plot(rules[1:10], method="graph", interactive=TRUE, shading="confidence")
plot(rules[1:10], method="paracoord", control=list(reorder=TRUE))
head(wine)
summary(wine)
# Delete missing values
wine <- na.omit(wine)
wine
x <- data.frame(a=c(1,3,5), b=c(100,150,300))
x
x
x
x
x
scale(x)
x
scale(x)
wine
wine
head(wine)
scale(wine)
wine_scales <- scale(wine)
wine_scales
wine_scaled <- scale(wine)
wine_scaled
#Install the factoextra package and library.
install.packages("factoextra") #see link
library(factoextra)
head(iris)
head(iris)
str(iris)
#Step 1 - Subset the data if needed
iris_data <- iris[, -5]
Step 2 - Set seed so the results are reproducible.
iris_data <- iris[, -5]
set.seed(111)
iris_scaled <- scale(iris_data)
iris_kmeans <- kmeans(iris_scaled, 3, nstart=25)
iris_kmeans
iris_kmeans$cluster
iris_kmeans$tot.withinss
fviz_cluster(iris_kmeans, data = iris_scaled,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_minimal()
)
iris_kmeans$size
iris_kmeans$centers
iris_kmeans$cluster
aggregate(iris_data, by=list(cluster=iris_kmeans$cluster), FUN=mean)
iris_data <- iris[, -5]
iris_data
wine_scaled
wine_kmeans <- kmeans(wine_scaled, 8)
wine_kmeans
wine_kmeans$tot.withinss
wine_kmeans$tot.withinss
wine_kmeans$tot.withinss
kmeans(wine_scaled, 10)
wine_kmeans$tot.withinss
kmeans(wine_scaled, 10)
wine_kmeans<-kmeans(wine_scaled, 10)
kmeans(wine_scaled, 10)
wine_kmeans$tot.withinss
wine_kmeans<-kmeans(wine_scaled, 10)
wine_kmeans$tot.withinss
wine_kmeans<-kmeans(wine_scaled, 10)
wine_kmeans$tot.withinss
wine_kmeans<-kmeans(wine_scaled, 6, kstart= 30)
wine_kmeans<-kmeans(wine_scaled, 6, nstart= 30)
wine_kmeans
wine_kmeans$tot.withinss
wine_kmeans$tot.withinss
wine_kmeans<-kmeans(wine_scaled, 6, kstart= 30)
wine_kmeans<-kmeans(wine_scaled, 6, nstart= 100)
wine_kmeans$tot.withinss
wine_kmeans$tot.withinss
wssplot <- function(data, nc=15, seed=1234) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- kmeans(data, centers=i)$tot.withinss
}
plot(1:nc, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
}
wssplot(wine_scaled, seed = 2222)
wssplot(wine_scaled, seed = 9)
wssplot(wine_scaled, seed = 9, nc=10)
wssplot(iris_scaled, seed = 2222)
wssplot(iris_scaled, seed = 9)
wssplot(iris_scaled, seed = 9, nc=10)
wssplot(iris_scaled, seed = 2222)
wssplot(iris_scaled, seed = 9)
wssplot(iris_scaled, seed = 2222)
fviz_nbclust(iris_scaled, kmeans, method = "silhouette") + labs(subtitle = "Silhouette method")
fviz_nbclust(iris_scaled, kmeans, method = "wss") +  geom_vline(xintercept = 4, linetype = 2) + labs(subtitle = "Elbow Method")
wssplot(wine_scaled, seed = 9, nc=10)
wine_kmeans <- kmeans(wine_scaled, 3, nstart=20)
wine_kmeans$tot.withinss
fviz_cluster(wine_kmeans, data = wine_scaled,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_minimal()
)
wine_kmeans <- kmeans(wine_scaled, 3, nstart=100)
fviz_cluster(wine_kmeans, data = wine_scaled,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_minimal()
)
wine_kmeans <- kmeans(wine_scaled, 3, nstart=1000)
fviz_cluster(wine_kmeans, data = wine_scaled,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_minimal()
)
getwd()
setwd("F:/University of Sunshine Coast/Semester 1/Data Science - ICT110/Week 9")
getwd()
mercury
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution",xlab="Number of Gears", ylab="count")
barplot(counts, main="Car Distribution",xlab="Number of Gears", ylab="count", col = c("steelblue", "#E69F00", "#56B4E9"))
getwd()
setwd([1] "F:/University of Sunshine Coast/Semester 1/Data Science - ICT110/Week 9")
setwd("F:/University of Sunshine Coast/Semester 1/Data Science - ICT110/Week 6")
setwd("F:/University of Sunshine Coast/Semester 1/Data Science - ICT110/Week 9")
getwd()
dw
bruh
